-- vim: ts=4 sw=4 noet ai cindent syntax=lua

conky.config = {
	-- disable X11 integration
	out_to_x = false,
	cpu_avg_samples = 9,
	net_avg_samples = 9,
	if_up_strictness = "address",
	out_to_console = true,
	out_to_stderr = false,
	--pad_percents = 2,
	update_interval = 0.3,
	uppercase = false,
	use_spacer = 'left',
	format_human_readable = true,
	top_name_width = 12,
}

-- concatenates string values of elements in a table
-- using the given strings for the first, last, and
-- separating strings
function concat_table(tbl, first, last, sep)
	local t = { }
	for k,v in ipairs(tbl) do
		t[#t+1] = tostring(v)
	end
	return first .. table.concat(t, sep) .. last
end

function json_attribute(name, value, dontquote)
	if dontquote == true
	then
		return "\"" .. name .. "\": "   .. value
	else
		return "\"" .. name .. "\": \"" .. value .. "\""
	end
end

-- attributes is a table
function i3bar_create_block(attributes)
	-- check mandatory options
	if type(attributes.full_text) ~= "string" then
		error("Full text required for block")
	--elseif type(options.width) ~= "number" then
	--	error("no width")
	end
	json_attributes = {json_attribute("full_text", attributes.full_text), }

	-- add optional attributes

	if type(attributes.name) == "string" then
		table.insert(json_attributes,
			json_attribute("name", attributes.name))
	end

	if type(attributes.color) == "string" then
		table.insert(json_attributes,
			json_attribute("color", "\\" .. attributes.color))
	end
	if type(attributes.separator) == "boolean" then
		table.insert(json_attributes,
			json_attribute("separator", tostring(attributes.separator), true))
	end

	return concat_table(json_attributes, "{", "}", ", ")
end

function i3bar_create_line(blocks)
	return concat_table(blocks, "[", "],", ", ")
end

uptime_block = i3bar_create_block({
		full_text = " $uptime_short on ",
		name = "uptime",
		color = "#ccbbaa",
		separator = true
	})

batt_block = i3bar_create_block({
		full_text = " batt ${battery_percent}% ac ${cat /sys/class/power_supply/AC/online} ",
		name = "batt",
		color = "#88ccff",
		separator = true
	})

batt_alert_block = i3bar_create_block({
		full_text = " ${cat /home/max/.battery_alert} ",
		name = "batt_alert",
		color = "#ff0000",
		separator = true
	})

cpu_block = i3bar_create_block({
		full_text = " cpu ${cpu 0}%, " ..
			--"${freq_g 1} GHz, " ..
			"${ibm_temps 0}Â°C, fan ${ibm_fan} rpm ",
		name = "cpu",
		color = "#ff8888",
		separator = true
	})

network_block = i3bar_create_block({
	full_text = " wl ${if_up wlp0s20f3}${wireless_essid wlp0s20f3}" ..
		"${else}disconnected${endif}" ..
		"${if_up enp0s31f6}" ..
		"${if_up wlp0s20f3}, ${endif}" ..
		"eth connected${endif}" ..
		"${if_up tun0} + VPN${endif}" ..
		"${if_up proton0} + VPN${endif} ",
		name = "network",
		color = "#88ff88",
		separator = true
	})

audio_block = i3bar_create_block({
	full_text = " vol ${pa_sink_volume}%" ..
		-- "${pa_sink_volumebar}" ..
		" ",
		name = "audio",
		color = "#ff88ff",
		separator = true
	})

mem_block = i3bar_create_block({
		full_text = " ram $mem ",
		name = "mem",
		color = "#ffcc88",
		separator = true
	})

space_block = i3bar_create_block({
		full_text = " ${fs_free /home} ~ ${fs_free /} / free ",
		name = "space",
		color = "#ffccff",
		separator = true
	})

clock_block = i3bar_create_block({
		full_text = " ${time %H:%M %a %d/%m} ",
		name = "clock",
		color = "#ffff00",
		separator = true
	})

end_block = i3bar_create_block({
		full_text = '',
		separator = true
		})

conky.text = i3bar_create_line({
		batt_alert_block,
		network_block,
		cpu_block,
		mem_block,
		space_block,
		uptime_block,
		audio_block,
		batt_block,
		clock_block,
		end_block
	})
